/*
 * CiberLoja API
 * API para gestionar tienda 
 *
 * OpenAPI spec version: 1.0
 * Contact: soporte@reflevision.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient.js";
import ClienteDTO from '../model/ClienteDTO.js';
import DireccionDTO from '../model/DireccionDTO.js';
import EmpleadoDTO from '../model/EmpleadoDTO.js';
import FormDataContentDisposition from '../model/FormDataContentDisposition.js';
import Localidad from '../model/Localidad.js';
import Pais from '../model/Pais.js';
import Pedido from '../model/Pedido.js';
import ProductoDTO from '../model/ProductoDTO.js';
import Provincia from '../model/Provincia.js';
import Results from '../model/Results.js';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the autenticarCliente operation.
     * @callback moduleapi/DefaultApi~autenticarClienteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClienteDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autenticación de un cliente
     * Autenticación de un cliente introduciendo su corre electrónico y su contraseña
     * @param {Object} opts Optional parameters
     * @param {module:model/ClienteDTO} opts.body 
     * @param {module:api/DefaultApi~autenticarClienteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    autenticarCliente(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClienteDTO;

      return this.apiClient.callApi(
        '/api/cliente/autenticar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the autenticarEmpleado operation.
     * @callback moduleapi/DefaultApi~autenticarEmpleadoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmpleadoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autenticación de un empleado
     * Autenticación de un empleado mediante su ID y contraseña
     * @param {Object} opts Optional parameters
     * @param {module:model/EmpleadoDTO} opts.body 
     * @param {module:api/DefaultApi~autenticarEmpleadoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    autenticarEmpleado(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmpleadoDTO;

      return this.apiClient.callApi(
        '/api/empleado/autenticar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDireccion operation.
     * @callback moduleapi/DefaultApi~createDireccionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DireccionDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creación de una dirección
     * Crea una nueva dirección con los datos proporcionados
     * @param {Object} opts Optional parameters
     * @param {module:model/DireccionDTO} opts.body 
     * @param {module:api/DefaultApi~createDireccionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDireccion(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DireccionDTO;

      return this.apiClient.callApi(
        '/api/direccion/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPedido operation.
     * @callback moduleapi/DefaultApi~createPedidoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pedido{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creación de un pedido
     * Crea un pedido introduciendo todos los datos del mismo
     * @param {Object} opts Optional parameters
     * @param {module:model/Pedido} opts.body 
     * @param {module:api/DefaultApi~createPedidoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPedido(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pedido;

      return this.apiClient.callApi(
        '/api/pedido/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCliente operation.
     * @callback moduleapi/DefaultApi~deleteClienteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClienteDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminación de cliente
     * Eliminación de un cliente a partir del id que tiene en base de datos
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {module:api/DefaultApi~deleteClienteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteCliente(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClienteDTO;

      return this.apiClient.callApi(
        '/api/cliente/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDireccion operation.
     * @callback moduleapi/DefaultApi~deleteDireccionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DireccionDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminación de una dirección
     * Elimina una dirección a partir de su ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {module:api/DefaultApi~deleteDireccionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteDireccion(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DireccionDTO;

      return this.apiClient.callApi(
        '/api/direccion/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePedido operation.
     * @callback moduleapi/DefaultApi~deletePedidoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminación de un pedido
     * Elimina un pedido a partir del identificador introducido
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {module:api/DefaultApi~deletePedidoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePedido(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/pedido/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findAllLocalidades operation.
     * @callback moduleapi/DefaultApi~findAllLocalidadesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Localidad{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las localidades
     * Recupera una lista de todas las localidades disponibles en la base de datos
     * @param {module:api/DefaultApi~findAllLocalidadesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findAllLocalidades(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Localidad;

      return this.apiClient.callApi(
        '/api/localidad/findAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findAllPaises operation.
     * @callback moduleapi/DefaultApi~findAllPaisesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pais{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las paises
     * Recupera una lista de todas las paises disponibles en la base de datos
     * @param {module:api/DefaultApi~findAllPaisesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findAllPaises(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pais;

      return this.apiClient.callApi(
        '/api/pais/findAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findAllProvincias operation.
     * @callback moduleapi/DefaultApi~findAllProvinciasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provincia{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las provincias
     * Recupera una lista de todas las provincias disponibles en la base de datos
     * @param {module:api/DefaultApi~findAllProvinciasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findAllProvincias(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provincia;

      return this.apiClient.callApi(
        '/api/provincia/findAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findClienteById operation.
     * @callback moduleapi/DefaultApi~findClienteByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClienteDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Busqueda por id de cliente
     * Recupera todos los datos de un cliente por su id
     * @param {Number} id 
     * @param {module:api/DefaultApi~findClienteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findClienteById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findClienteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClienteDTO;

      return this.apiClient.callApi(
        '/api/cliente/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findDireccionById operation.
     * @callback moduleapi/DefaultApi~findDireccionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DireccionDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda por ID de dirección
     * Recupera todos los datos de una dirección por su ID
     * @param {Number} id 
     * @param {module:api/DefaultApi~findDireccionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findDireccionById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findDireccionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DireccionDTO;

      return this.apiClient.callApi(
        '/api/direccion/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findEmpleadoById operation.
     * @callback moduleapi/DefaultApi~findEmpleadoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmpleadoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda por id de empleado
     * Recupera todos los datos de un empleado por su id
     * @param {Number} id 
     * @param {module:api/DefaultApi~findEmpleadoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findEmpleadoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findEmpleadoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmpleadoDTO;

      return this.apiClient.callApi(
        '/api/empleado/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findLocalidadById operation.
     * @callback moduleapi/DefaultApi~findLocalidadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Localidad{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda por ID de localidad
     * Recupera todos los datos de una localidad específica por su ID
     * @param {Number} id 
     * @param {module:api/DefaultApi~findLocalidadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findLocalidadById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findLocalidadById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Localidad;

      return this.apiClient.callApi(
        '/api/localidad/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findPaisesById operation.
     * @callback moduleapi/DefaultApi~findPaisesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pais{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda por ID de paises
     * Recupera todos los datos de un pais específica por su ID
     * @param {Number} id 
     * @param {module:api/DefaultApi~findPaisesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findPaisesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findPaisesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pais;

      return this.apiClient.callApi(
        '/api/pais/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findPedidoById operation.
     * @callback moduleapi/DefaultApi~findPedidoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pedido{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener un pedido por ID
     * Este endpoint permite obtener un pedido del sistema por su ID.
     * @param {Number} id ID del pedido a buscar
     * @param {module:api/DefaultApi~findPedidoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findPedidoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findPedidoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pedido;

      return this.apiClient.callApi(
        '/api/pedido/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findPedidosByClienteId operation.
     * @callback moduleapi/DefaultApi~findPedidosByClienteIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pedido>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener pedidos por ID de cliente
     * Este endpoint permite obtener todos los pedidos asociados a un cliente por su ID.
     * @param {Number} clienteId ID del cliente para buscar sus pedidos
     * @param {module:api/DefaultApi~findPedidosByClienteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findPedidosByClienteId(clienteId, callback) {
      
      let postBody = null;
      // verify the required parameter 'clienteId' is set
      if (clienteId === undefined || clienteId === null) {
        throw new Error("Missing the required parameter 'clienteId' when calling findPedidosByClienteId");
      }

      let pathParams = {
        'clienteId': clienteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Pedido];

      return this.apiClient.callApi(
        '/api/pedido/cliente/{clienteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findPedidosByCriteria operation.
     * @callback moduleapi/DefaultApi~findPedidosByCriteriaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Pedido>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda de pedidos por criteria
     * Búsqueda de pedidos a partir de varios parámetros introducidos
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {String} opts.fechaDesde 
     * @param {String} opts.fechaHasta 
     * @param {Number} opts.precioDesde 
     * @param {Number} opts.precioHasta 
     * @param {Number} opts.clienteId 
     * @param {Number} opts.tipoEstadoPedidoId 
     * @param {String} opts.productoId 
     * @param {String} opts.descripcion 
     * @param {module:api/DefaultApi~findPedidosByCriteriaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findPedidosByCriteria(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'fechaDesde': opts['fechaDesde'],'fechaHasta': opts['fechaHasta'],'precioDesde': opts['precioDesde'],'precioHasta': opts['precioHasta'],'clienteId': opts['clienteId'],'tipoEstadoPedidoId': opts['tipoEstadoPedidoId'],'productoId': opts['productoId'],'descripcion': opts['descripcion']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Pedido];

      return this.apiClient.callApi(
        '/api/pedido/pedidos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findProductoById operation.
     * @callback moduleapi/DefaultApi~findProductoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una producto por ID
     * Este endpoint permite obtener un producto del sistema por su ID.
     * @param {String} id ID del producto a buscar
     * @param {module:api/DefaultApi~findProductoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findProductoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findProductoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductoDTO;

      return this.apiClient.callApi(
        '/api/producto/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findProductoByIdFromSoap operation.
     * @callback moduleapi/DefaultApi~findProductoByIdFromSoapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar un producto por ID
     * Este endpoint permite buscar un producto específico por su ID desde el sistema.
     * @param {Object} opts Optional parameters
     * @param {String} opts.empresa 
     * @param {String} opts.utilizador 
     * @param {String} opts.password 
     * @param {String} opts.id 
     * @param {module:api/DefaultApi~findProductoByIdFromSoapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findProductoByIdFromSoap(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'empresa': opts['empresa'],'utilizador': opts['utilizador'],'password': opts['password'],'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductoDTO;

      return this.apiClient.callApi(
        '/api/producto/sync-soap/findById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findProductosByCriteria operation.
     * @callback moduleapi/DefaultApi~findProductosByCriteriaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar productos por criterios
     * Este endpoint permite buscar productos aplicando filtros opcionales como ID, nombre, rango de precios, cantidad de unidades, y localización.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.descripcion 
     * @param {Number} opts.precioMin 
     * @param {Number} opts.precioMax 
     * @param {Number} opts.stockMin 
     * @param {Number} opts.stockMax 
     * @param {String} opts.familia 
     * @param {Number} opts.page  (default to <.>)
     * @param {Number} opts.size  (default to <.>)
     * @param {module:api/DefaultApi~findProductosByCriteriaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findProductosByCriteria(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'descripcion': opts['descripcion'],'precioMin': opts['precioMin'],'precioMax': opts['precioMax'],'stockMin': opts['stockMin'],'stockMax': opts['stockMax'],'familia': opts['familia'],'page': opts['page'],'size': opts['size']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Results;

      return this.apiClient.callApi(
        '/api/producto/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findProductosByDestaques operation.
     * @callback moduleapi/DefaultApi~findProductosByDestaquesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar productos por destacados
     * Este endpoint permite buscar productos destacados
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page  (default to <.>)
     * @param {Number} opts.size  (default to <.>)
     * @param {module:api/DefaultApi~findProductosByDestaquesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findProductosByDestaques(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'size': opts['size']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Results;

      return this.apiClient.callApi(
        '/api/producto/searchDestaques', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findProvinciaById operation.
     * @callback moduleapi/DefaultApi~findProvinciaByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provincia{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Búsqueda por ID de provincias
     * Recupera todos los datos de una provincias específica por su ID
     * @param {Number} id 
     * @param {module:api/DefaultApi~findProvinciaByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findProvinciaById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findProvinciaById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provincia;

      return this.apiClient.callApi(
        '/api/provincia/find/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback moduleapi/DefaultApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Solicitud de restablecimiento de contraseña
     * Genera un token de restablecimiento de contraseña y envía un correo electrónico con un enlace para restablecer la contraseña
     * @param {Object} opts Optional parameters
     * @param {{String: String}} opts.body 
     * @param {module:api/DefaultApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forgotPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/cliente/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalGrammar operation.
     * @callback moduleapi/DefaultApi~getExternalGrammarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/DefaultApi~getExternalGrammarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExternalGrammar(path, callback) {
      
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getExternalGrammar");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/application.wadl/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getImageFile operation.
     * @callback moduleapi/DefaultApi~getImageFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Servir imagen de producto
     * Devuelve el archivo de imagen para un producto específico.
     * @param {String} productoId ID del producto
     * @param {String} fileName Nombre del archivo de imagen
     * @param {module:api/DefaultApi~getImageFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getImageFile(productoId, fileName, callback) {
      
      let postBody = null;
      // verify the required parameter 'productoId' is set
      if (productoId === undefined || productoId === null) {
        throw new Error("Missing the required parameter 'productoId' when calling getImageFile");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getImageFile");
      }

      let pathParams = {
        'productoId': productoId,'fileName': fileName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/_*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/file/images/{productoId}/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getImagesByProductoId operation.
     * @callback moduleapi/DefaultApi~getImagesByProductoIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener imágenes por ID de producto
     * Recupera la lista de URLs de imágenes asociadas a un producto por su ID.
     * @param {String} productoId ID del producto para buscar sus imágenes
     * @param {module:api/DefaultApi~getImagesByProductoIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getImagesByProductoId(productoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productoId' is set
      if (productoId === undefined || productoId === null) {
        throw new Error("Missing the required parameter 'productoId' when calling getImagesByProductoId");
      }

      let pathParams = {
        'productoId': productoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/file/producto/{productoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWadl operation.
     * @callback moduleapi/DefaultApi~getWadlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getWadlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWadl(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.sun.wadl+xml', 'application/xml'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/application.wadl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the registrarCliente operation.
     * @callback moduleapi/DefaultApi~registrarClienteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClienteDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registro de cliente
     * Registro de un cliente introduciendo todos los datos del mismo
     * @param {Object} opts Optional parameters
     * @param {String} opts.nombre 
     * @param {String} opts.nickname 
     * @param {String} opts.primerApellido 
     * @param {String} opts.segundoApellido 
     * @param {String} opts.dni 
     * @param {String} opts.email 
     * @param {String} opts.telefono 
     * @param {String} opts.password 
     * @param {module:api/DefaultApi~registrarClienteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    registrarCliente(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nombre': opts['nombre'],'nickname': opts['nickname'],'primerApellido': opts['primerApellido'],'segundoApellido': opts['segundoApellido'],'dni': opts['dni'],'email': opts['email'],'telefono': opts['telefono'],'password': opts['password']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ClienteDTO;

      return this.apiClient.callApi(
        '/api/cliente/registrar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback moduleapi/DefaultApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restablecimiento de contraseña
     * Valida un token de restablecimiento y actualiza la contraseña del cliente
     * @param {Object} opts Optional parameters
     * @param {{String: String}} opts.body 
     * @param {module:api/DefaultApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/cliente/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the syncProductosFromSoap operation.
     * @callback moduleapi/DefaultApi~syncProductosFromSoapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar un producto
     * Este endpoint permite buscar un producto del sistema 
     * @param {Object} opts Optional parameters
     * @param {String} opts.empresa 
     * @param {String} opts.utilizador 
     * @param {String} opts.password 
     * @param {String} opts.descricao 
     * @param {Number} opts.pVP3Min 
     * @param {Number} opts.pVP3Max 
     * @param {Number} opts.stockMin 
     * @param {Number} opts.stockMax 
     * @param {Boolean} opts.destaques 
     * @param {module:api/DefaultApi~syncProductosFromSoapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    syncProductosFromSoap(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'empresa': opts['empresa'],'utilizador': opts['utilizador'],'password': opts['password'],'descricao': opts['descricao'],'PVP3Min': opts['pVP3Min'],'PVP3Max': opts['pVP3Max'],'StockMin': opts['stockMin'],'StockMax': opts['stockMax'],'Destaques': opts['destaques']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Results;

      return this.apiClient.callApi(
        '/api/producto/sync-soap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCliente operation.
     * @callback moduleapi/DefaultApi~updateClienteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClienteDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualización de un cliente
     * Actualiza un cliente introduciendo todos los datos del mismo
     * @param {Object} opts Optional parameters
     * @param {module:model/ClienteDTO} opts.body 
     * @param {module:api/DefaultApi~updateClienteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateCliente(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClienteDTO;

      return this.apiClient.callApi(
        '/api/cliente/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDireccion operation.
     * @callback moduleapi/DefaultApi~updateDireccionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DireccionDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualización de una dirección
     * Actualiza los datos de una dirección existente
     * @param {Object} opts Optional parameters
     * @param {module:model/DireccionDTO} opts.body 
     * @param {module:api/DefaultApi~updateDireccionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateDireccion(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DireccionDTO;

      return this.apiClient.callApi(
        '/api/direccion/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePedido operation.
     * @callback moduleapi/DefaultApi~updatePedidoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pedido{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualización de un pedido
     * Actualiza todos los datos pertenecientes al pedido
     * @param {Object} opts Optional parameters
     * @param {module:model/Pedido} opts.body 
     * @param {module:api/DefaultApi~updatePedidoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePedido(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pedido;

      return this.apiClient.callApi(
        '/api/pedido/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadImage operation.
     * @callback moduleapi/DefaultApi~uploadImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subir una imagen para un producto
     * Sube una imagen asociada a un producto específico usando su ID.
     * @param {String} productoId ID del producto al que se subirá la imagen
     * @param {Object} opts Optional parameters
     * @param {module:model/FormDataContentDisposition} opts.file 
     * @param {module:api/DefaultApi~uploadImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadImage(productoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productoId' is set
      if (productoId === undefined || productoId === null) {
        throw new Error("Missing the required parameter 'productoId' when calling uploadImage");
      }

      let pathParams = {
        'productoId': productoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/file/upload/producto/{productoId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}